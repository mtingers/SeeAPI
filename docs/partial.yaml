
# define functions in namespace "F"
functions F:
  c:
    cmodule:
      name: filename.c
      function: function_name
      args: {foo: str, bar: str, baz: u32}

  queryA:
    db.query:
      sql: >
        SELECT id, name
        FROM users
        WHERE id > 1 AND name != 'foo'
        LIMIT 10
    <|db.query:
        sql-file: query1.sql

  # example with args 
  fetchwrap:
    args: {foo: str, bar: str}
    <|fetch.get:
      host: https://.../
      headers:
        token: xyz...
      params: {a: 1, b: 2, foo: $foo, bar: $bar}


# define the HTTP routes and how they are handled
routes:
  # triggers on GET /see, runs queryA from F, returns F.c() value to HTTP client
  get /see:
    F.queryA: {}
    <|F.c: {foo: 1, bar: 2, baz: 3}

  # Use function from F, reverse proxy to host and return its response
  get /foo:
    F.queryA: {}
    <|reverse-proxy:
      host: https://.../

  # query external API directly
  get /external:
    <|fetch.get:
      host: https://.../
      headers:
        token: xyz...
      # or basic auth
      basic-auth:
        username: xyz
        password: xyz
      # query params
      params: {a: 1, b: 2}
      # or data for post
      # data: {a: 1, b: 2}
      # or json get
      # json: {a: 1, b: 2}

  get /externalwrap:
    <|F.fetchwrap:
        foo: myfoo
        bar: mybar

  # example regex query string matching and return json
  get /foo/<regex:foo.*[0-9A-z]+?(xy*(@#!)*7$)*(@"'*#$@)00)>:
    <|json:
      hello: regex 

  # query database from ID in GET query and return results as json
  get /foo/<i32:id>:
    <|db.query:
      sql: select * from foo where id=?
      params: [$id]
      ret: json 

  # return raw data of exec'd command piped to othercommand 
  get /bar:
    <|exec: /command | othercommand

  # set http content-type, read entire file and send to client
  get /read:
    header:
      content-type: xyz
    <|file_read: /path/to/file


  # set http header, stream file contents to client
  get /stream:
    http.header:
      content-type: xyz
    <|file_stream:
      path: /path/to/file

  # write file using POST data, insert sql, return json
  post /write:
    file_write:
      data: $POST.fieldname.childfield
      path: /path/to/file.txt
    foo.db.query:
      sql: insert into sometable (a, b) values (?, ?)
      params: [$POST.a|no-post-a, $V.version]
      # params: [$POST.a, $mod.V.version]
    <|json:
        ok: yep

 # # orm-like query example, just an idea but unsure of at this time and may not implement
 # get /resultset:
 #   db.orm.foo.select:
 #     fields:
 #       - id
 #     filters:
 #       like:
 #         key: username
 #         value: "%foo%"

  # return exec stdout as json 
  get /bar2:
    $result<|exec:
      cmd: ...
    <|json:
        foo: 123
        data: $result.stdout
        example: \$example of escaping a dollar sign for string literal

  # redis set/hset 
  get /kv/<str:namespace>:
    red.set:
      key: foo
      # example default value is string "unset" if $GET.foo is blank 
      value: $GET.foo|unset
    foo.red.hset:
      name: ...
      value:
        when: then
        who: me
        count: 2

  # inlinecode 
  get /inlinecode/<i32:count>:
    $x<|code.c: |
      i32 x = 123;
      i32 y = 321;
      return x * y + $count;
    <|json:
      x: $x
